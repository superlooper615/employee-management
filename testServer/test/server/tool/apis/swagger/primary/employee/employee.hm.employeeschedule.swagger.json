{
  "tags": [{
    "name": "employeeHasManyemployeeschedule",
    "description": "Everything about has many relation"
  }],
  "paths": {
    "/api/v1/employee/has/employeeschedule": {
      "get": {
        "tags": [
          "employeeHasManyemployeeschedule"
        ],
        "summary": "Get employee list with employeeschedule children",
        "description": "",
        "operationId": "employeeHasManyemployeescheduleList",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/employeeschedule": {
      "get": {
        "tags": [
          "employeeHasManyemployeeschedule"
        ],
        "summary": "Find employeeschedule list by parent employee id",
        "description": "Returns a single employee",
        "operationId": "getemployeescheduleByemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employee not found"
          }
        }
      },
      "post": {
        "tags": [
          "employeeHasManyemployeeschedule"
        ],
        "summary": "Insert employeeschedule under a parent employee",
        "description": "Returns a single employee",
        "operationId": "insertemployeescheduleByemployeeId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "in": "body",
            "name": "body",
            "description": "employeeschedule object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/employeeschedule/{employeescheduleId}": {
      "get": {
        "tags": [
          "employeeHasManyemployeeschedule"
        ],
        "summary": "Get by employeeschedule id parent employee id",
        "description": "Returns a single employee",
        "operationId": "getemployeescheduleByIdAndemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeescheduleId",
            "in": "path",
            "description": "ID of employeeschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "employeeHasManyemployeeschedule"
        ],
        "summary": "Delete by employeeschedule id parent employee id",
        "description": "Returns a single employee",
        "operationId": "deleteemployeescheduleByIdAndemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeescheduleId",
            "in": "path",
            "description": "ID of cemployeeschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "employeeHasManyemployeeschedule"
        ],
        "summary": "Update employeeschedule under a parent employee",
        "description": "Returns a single employee",
        "operationId": "updateemployeescheduleByIdAndemployeeId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "in": "body",
            "name": "body",
            "description": "employeeschedule object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeescheduleId",
            "in": "path",
            "description": "ID of employeeschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/employeeschedule/{employeescheduleId}/exists": {
      "get": {
        "tags": [
          "employeeHasManyemployeeschedule"
        ],
        "summary": "Check row exists by employeeschedule id and parent employee id",
        "description": "",
        "operationId": "existsemployeescheduleByIdAndemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeescheduleId",
            "in": "path",
            "description": "ID of employeeschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/employeeschedule/findOne": {
      "get": {
        "tags": [
          "employeeHasManyemployeeschedule"
        ],
        "summary": "Find one employeeschedule by parent employee id and filters",
        "description": "",
        "operationId": "findOneemployeescheduleByemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/employeeschedule/count": {
      "get": {
        "tags": [
          "employeeHasManyemployeeschedule"
        ],
        "summary": "Get employeeschedule count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    }
  },
  "definitions": {}
}